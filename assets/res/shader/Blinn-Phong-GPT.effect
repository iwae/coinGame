// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: phong-vs
      frag: phong-fs:frag
      properties: &props
        mainTexture:          { value: grey, target: albedoMap, editor: { displayName: AlbedoMap } }
        tilingOffset:         { value: [1, 1, 0, 0] }
        mainColor:            { value: [1.0, 1.0, 1.0, 1.0], target: albedoColor, linear: true, editor: { displayName: Albedo, type: color } }
        shininess:            { value: 10.0, editor: { slide: true, range: [0.1, 100.0], step: 0.01 } }
        specularColor:        { value: [1, 1, 1, 1], editor: { type: color } }
        albedoScale:          { value: [1.0, 1.0, 1.0], target: albedoScaleAndCutoff.xyz }
        alphaThreshold:       { value: 0.5, target: albedoScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        windDirection:        { value: [0.0, 0.0, 1.0], target: windParams.xyz, editor: { parent: USE_WIND_EFFECT } }
        windStrength:         { value: 1.0, target: windParams.w, editor: { type: number, range: [0.0, 5.0], step: 0.1, parent: USE_WIND_EFFECT} }
        grassHeight:          { value: 2.0, editor: { type: number, range: [1.0, 5.0], step: 0.1, parent: USE_WIND_EFFECT} }
      }%


CCProgram shared-ubos %{
  uniform Constants {
    vec4 tilingOffset;
    vec4 albedoColor;
    vec4 albedoScaleAndCutoff;
    vec4 specularColor;
    vec4 windParams;
    float grassHeight;
    float shininess;
  };
}%

CCProgram phong-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  // #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <glsl-noise-simplex-3d>
  #include <shared-ubos>

  #if USE_VERTEX_COLOR
    in vec4 a_color;
    out vec4 v_color;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  out vec2 v_uv;


  // generated by GPT 4
  vec3 getWindEffect(vec3 position) {
    float windFactor = snoise(position * 0.1 + cc_time.x * 0.5) * windParams.w;
    return windParams.xyz * windFactor;
  }

  void main () {

    StandardVertInput In;

    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld *  In.position;

    v_position = pos.xyz;

    #if USE_WIND_EFFECT
    pos.xyz += getWindEffect(pos.xyz) * pos.y / grassHeight;
    #endif

    vec4 position = cc_matView * pos;

    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    gl_Position = cc_matProj * position;
  }
}%

CCProgram phong-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/output-standard>
  #include <common/data/unpack>
  #include <shared-ubos>
  

  in vec3 v_position;
  in vec2 v_uv;
  in vec3 v_normal;

  #if USE_ALBEDO_MAP
    uniform sampler2D albedoMap;
  #endif

  #if USE_VERTEX_COLOR
    in vec4 v_color;
  #endif

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  #endif

  void blinnPhong(inout vec4 diffuseColor){
    vec3 N = normalize(v_normal);
    vec3 L = normalize(cc_mainLitDir.xyz * -1.0);
    float diffuseFactor = max(dot(N, L), 0.0);
    vec3 diffuse = diffuseFactor * diffuseColor.rgb * cc_mainLitColor.xyz;

    vec3 cameraPosition = cc_cameraPos.xyz / cc_cameraPos.w;
    vec3 V = normalize(cameraPosition- v_position);
    vec3 H = normalize(L + V);
    float specularFactor = pow(max(dot(N, H), 0.0), shininess);
    
    vec3 specular = specularFactor * specularColor.rgb * cc_mainLitColor.xyz;
    vec3 ambient = cc_ambientSky.rgb * diffuseColor.rgb;
    diffuseColor= vec4(ambient + diffuse + specular, diffuseColor.a);

  }
  vec4 frag () {
    //Blin-Phong from GPT4.0
    vec4 color = albedoColor;
    #if USE_VERTEX_COLOR
      color *= v_color;
    #endif

    #if USE_ALBEDO_MAP
      color *= texture(albedoMap, v_uv);
    #endif
    color.rgb *= albedoScaleAndCutoff.xyz;

    blinnPhong(color);
 
    #if USE_ALPHA_TEST
      if (color.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;
    #endif

    return CCFragOutput(color);
  }
}%


